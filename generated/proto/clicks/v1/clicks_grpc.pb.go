// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: clicks/v1/clicks.proto

package clicksv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Clicks_Click_FullMethodName  = "/clicks.v1.Clicks/Click"
	Clicks_GetMap_FullMethodName = "/clicks.v1.Clicks/GetMap"
)

// ClicksClient is the client API for Clicks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClicksClient interface {
	Click(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*ClickResponse, error)
	GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (*GetMapResponse, error)
}

type clicksClient struct {
	cc grpc.ClientConnInterface
}

func NewClicksClient(cc grpc.ClientConnInterface) ClicksClient {
	return &clicksClient{cc}
}

func (c *clicksClient) Click(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*ClickResponse, error) {
	out := new(ClickResponse)
	err := c.cc.Invoke(ctx, Clicks_Click_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clicksClient) GetMap(ctx context.Context, in *GetMapRequest, opts ...grpc.CallOption) (*GetMapResponse, error) {
	out := new(GetMapResponse)
	err := c.cc.Invoke(ctx, Clicks_GetMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClicksServer is the server API for Clicks service.
// All implementations must embed UnimplementedClicksServer
// for forward compatibility
type ClicksServer interface {
	Click(context.Context, *ClickRequest) (*ClickResponse, error)
	GetMap(context.Context, *GetMapRequest) (*GetMapResponse, error)
	mustEmbedUnimplementedClicksServer()
}

// UnimplementedClicksServer must be embedded to have forward compatible implementations.
type UnimplementedClicksServer struct {
}

func (UnimplementedClicksServer) Click(context.Context, *ClickRequest) (*ClickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Click not implemented")
}
func (UnimplementedClicksServer) GetMap(context.Context, *GetMapRequest) (*GetMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMap not implemented")
}
func (UnimplementedClicksServer) mustEmbedUnimplementedClicksServer() {}

// UnsafeClicksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClicksServer will
// result in compilation errors.
type UnsafeClicksServer interface {
	mustEmbedUnimplementedClicksServer()
}

func RegisterClicksServer(s grpc.ServiceRegistrar, srv ClicksServer) {
	s.RegisterService(&Clicks_ServiceDesc, srv)
}

func _Clicks_Click_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClicksServer).Click(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clicks_Click_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClicksServer).Click(ctx, req.(*ClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clicks_GetMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClicksServer).GetMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clicks_GetMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClicksServer).GetMap(ctx, req.(*GetMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Clicks_ServiceDesc is the grpc.ServiceDesc for Clicks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clicks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clicks.v1.Clicks",
	HandlerType: (*ClicksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Click",
			Handler:    _Clicks_Click_Handler,
		},
		{
			MethodName: "GetMap",
			Handler:    _Clicks_GetMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clicks/v1/clicks.proto",
}
